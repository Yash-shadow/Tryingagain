version: "3"
services:
        app:
            image: app:v1
            build: .
            container_name: app
            volumes:
                # Log files. They are all also accessible to the agent container,   
                # through docker volume mount
                - ./logs/:/var/log/app/
            environment:
                # Tracing configuration
                - JAVA_TOOL_OPTIONS= -javaagent:./opentelemetry/opentelemetry-javaagent.jar
                - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://tempo:4317
                - OTEL_SERVICE_NAME=app
                - OTEL_TRACES_EXPORTER=otlp
                - LOGGING.FILE.NAME=/temp/app
                - spring.profiles.active=postgres
                - SPRING_DATASOURCE_URL=jdbc:postgresql://db/compose-postgres
                - SPRING_DATASOURCE_USERNAME=compose-postgres
                - SPRING_DATASOURCE_PASSWORD=compose-postgres
                - SPRING_JPA_HIBERNATE_DDL_AUTO=update
            ports:
                - 8080:8080
            depends_on:
                - tempo

        db:
            image: 'postgres:13.1-alpine'
            container_name: db
            environment:
                - POSTGRES_USER=compose-postgres
                - POSTGRES_PASSWORD=compose-postgres
            volumes:
                - user_data:/var/lib/postgresql   


        loki:
            image: grafana/loki:latest
            container_name: loki
            #network_mode: host
            volumes:
                - ./config/loki-config.yaml:/etc/config/loki.yaml
            entrypoint:
                - /usr/bin/loki
                - -config.file=/etc/config/loki.yaml
            ports:
                - 3100:3100 
        tempo:
            image: grafana/tempo:1.5.0
            container_name: tempo
            #network_mode: host
            command: [ "-config.file=/etc/tempo.yaml" ]
            volumes:
                - ./config/tempo-local.yaml:/etc/tempo.yaml
                - ./config/tempo-data:/tmp/tempo
            ports:
                - "14268"  # jaeger ingest
                - "3200"   # tempo
                - 4317:4317  # otlp grpc
                - "4318"  # otlp http
                - 9411:9411   # zipkin

        prometheus:
            image: prom/prometheus:latest
            container_name: prom
            #network_mode: host
            command: [
                "--config.file=/etc/prometheus.yaml",
                "--enable-feature=exemplar-storage",
                "--storage.tsdb.path=/prometheus",
                "--web.console.libraries=/usr/share/prometheus/console_libraries",
                "--web.console.templates=/usr/share/prometheus/consoles",
                "--web.enable-remote-write-receiver"
                ]

            volumes:
                - ./config/prometheus.yaml:/etc/prometheus.yaml
            ports:
                - 9090:9090




        grafana:
            image: grafana/grafana:9.1.0
            container_name: grafana
            #network_mode: host
            volumes:
                # grafana.ini
                # see: https://grafana.com/docs/grafana/latest/setup-grafana/configure-docker/#default-paths
                - ./config/grafana.ini:/etc/grafana/grafana.ini
                # Pre-load the data sources
                - ./config/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
                # Pre-load the Hello Observability dashboard
                - ./dashboards:/etc/grafana/provisioning/dashboards
            environment:
                - GF_AUTH_ANONYMOUS_ENABLED=true
                - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
                - GF_AUTH_DISABLE_LOGIN_FORM=true
                - GF_USERS_DEFAULT_THEME=light
                - GF_FEATURE_TOGGLES_ENABLE=tempoSearch,tempoServiceGraph,tempoApmTable

            ports:
                - 3000:3000

        agent:
            image: grafana/agent:latest
            container_name: agent
            #network_mode: host
            volumes:
                # Agent configuration
                - ./config/agent.yaml:/etc/agent-config/agent.yaml
                # Log files
                - ./logs:/tmp

                - /tmp/agent:/etc/agent
            entrypoint:
                - /bin/grafana-agent
                - -config.file=/etc/agent-config/agent.yaml
                - -metrics.wal-directory=/tmp/agent/wal
                - -enable-features=integrations-next
                - -config.expand-env
                - -config.enable-read-api
            environment:
                HOSTNAME: agent
            #   REMOTE_WRITE_HOST: cortex:9009
                LOKI_HOST: loki:3100
                TEMPO_HOST: tempo:3200
            ports:
                - 12345:12345
            depends_on:
                - loki
                - tempo
        
volumes:
        user_data:
                driver: local
    
